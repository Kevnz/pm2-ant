#!/usr/bin/env node

var commander = require('commander'),
  path = p = require('path'),
  fs = require('fs'),
  chalk = require('chalk'),
  _ = require('lodash'),
  pkg = require('../package.json'),
  Monitor = require('../lib/monitor'),
  crypto = require('crypto'),
  conf = require('../lib/util/conf');

commander.version(pkg.version, '-v, --version')
  .usage('[cmd] [options]');

commander.on('--help', function () {
  console.log('  Basic Examples:\n\n' +
    '    Start the service, by default configuration:\n' +
    chalk.grey('    $ pm2-ant start\n') +
    '\n' +
    '    Start the service, by specific configuration file:\n' +
    chalk.grey('    $ pm2-ant start --config config.ini\n')
  );
});

/**
 * Launch service
 */
commander.command('start')
  .option('--config [file]', 'pass ".ini" configuration file (with options)')
  .description('launch the data collect service')
  .action(function (cmd) {
    if (cmd.config) {
      var configFile;
      if (typeof cmd.config != 'string') {
        configFile = 'pm2-ant.ini';
      } else {
        configFile = cmd.config;
        if (configFile.indexOf('.') < 0) {
          configFile += '.ini';
        }
      }
      if (!fs.existsSync(configFile)) {
        console.log(chalk.red('✘ `' + configFile +'` does not exist!\n'));
        return process.exit();
      }

      try {
        var config = conf.File(path.resolve(process.cwd(), configFile)).loadSync().valueOf();
        setConfig(config);
      } catch (err) {
        console.log(chalk.red('✘ `' + configFile +'` is invalid!\n'));
        return process.exit();
      }
    }
    Monitor().run();
    console.log(chalk.green('✔ the data collect service has been launched!'));
  });

/**
 * Show configurations.
 */
commander.command('config')
  .description('show all configs')
  .action(showConfigs);

/**
 * Set config by key-value pairs.
 */
commander.command('set <key> <value>')
  .description('set config by key-value pairs')
  .action(function (key, value, cmd) {
    var mon = setConfig(key, value);
    mon && showConfigs(cmd, mon);
  });

/**
 * Unset config by key.
 */
commander.command('unset <key>')
  .description('unset config by key')
  .action(function (key, cmd) {
    var mon = Monitor();
    mon.config(key, null);
    showConfigs(cmd, mon);
  });

commander.parse(process.argv);

if (process.argv.length == 2) {
  commander.outputHelp();
  process.exit(0);
}

/**
 * Set configuration.
 * @param key
 * @param value
 * @returns {*}
 */
function setConfig(key, value) {
  var mon = Monitor();

  (function config(pairs) {
    if (pairs.length == 0) {
      return;
    }
    var pair = pairs.shift();
    if (!~Monitor.ACCEPT_KEYS.indexOf(pair[0])) {
      console.log(chalk.bold.yellow('[WARN]'), chalk.bold.cyan(pair[0]), 'is not an acceptable configuration.');
      return config(pairs);
    }
    if (pair[0] == 'password') {
      var md5 = crypto.createHash('md5');
      md5.update(pair[1]);
      pair[1] = md5.digest('hex');
    }
    mon.config(pair[0], pair[1]);
    config(pairs);
  })(typeof key == 'object' ? _.pairs(key) : [
    [key, value]
  ]);

  return mon;
}
/**
 * Show all configurations.
 * @param cmd
 * @param mon
 */
function showConfigs(cmd, mon) {
  if (!mon) {
    mon = Monitor();
  }
  var storage = mon._config.valueOf(),
    prints = '\n';
  var maxLen = 0;
  for (var k in storage) {
    maxLen = Math.max(k.length, maxLen);
  }
  maxLen += 1;
  for (var k in storage) {
    prints += chalk.bold(Array(maxLen - k.length).join(' ') + k + ': ') + ' ' + chalk.blue(storage[k] + '\n');
  }
  console.log(prints);
}
